#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
import argparse
import code
import datetime
import fnmatch
import os.path
import time
from dataclasses import dataclass
import pathlib
import subprocess
from typing import Deque, Dict, List


################################################################################
# find command wrapper


def get_find_command(path, local):
	cmd = []

	cmd += ['find', str(path), '-type', 'f', '-exec']

	cmd += ['stat', '-c', '%n~~%Y~~%s', '{}', ';']

	if not local:
		cmd = ['adb', 'shell'] + [f'"{p}"' for p in cmd]

	return cmd


@dataclass
class FileInfo:
	path_rel: pathlib.PurePath
	path: pathlib.PurePath
	mtime: int
	size: int

def parse_find_result(path_root, results):
	for line in results:
		parts = line.split('~~')

		if len(parts) != 3:
			continue

		try:
			path = pathlib.PurePath(parts[0])

			if path_root not in path.parents:
				print(f'path {path} not subdir of {path_root}')
				for p in path.parents:
					print(p)
				continue

			path_rel = path.relative_to(path_root)

			mtime = int(parts[1])
			size = int(parts[2])
		except:
			continue

		yield FileInfo(path_rel, path, mtime, size)


def list_files(path_root: pathlib.PurePath, local):
	cmd = get_find_command(path_root, local)

	print(' '.join(cmd))

	result = subprocess.run(cmd, encoding='utf-8', capture_output=True)

	if result.returncode != 0:
		print('nonzero return code of find command')
		print(result)
		exit()

	return parse_find_result(path_root, result.stdout.split('\n'))


################################################################################
# diff tool

def diff(files_source: List[FileInfo], files_dest: List[FileInfo]) -> (List[FileInfo], List[FileInfo]):
	"""return list of files to sync and rogue files"""
	files_rogue = []
	files_sync = []

	dict_source = {str(f.path): f for f in files_source}
	dict_dest = {str(f.path): f for f in files_dest}

	for file_dest in files_dest:
		if not str(file_dest.path) in dict_source:
			files_rogue.append(file_dest)

	for file_source in files_source:
		if not str(file_source.path) in dict_dest:
			files_sync.append(file_source)
			continue
		file_dest = dict_dest[str(file_source.path)]
		if file_dest.mtime != file_source.mtime or file_dest.size != file_source.size:
			files_sync.append(file_source)

	return files_sync, files_rogue


################################################################################
# adb push / pull

def get_copy_command(path_source: pathlib.PurePath, path_dest: pathlib.PurePath, push: bool):
	cmd = ['adb']

	if push:
		cmd += ['push']
	else:
		cmd += ['pull']

	cmd += [str(path_source), str(path_dest)]

	return cmd


def copy(file_source: FileInfo, file_dest: FileInfo, push: bool):
	cmd = get_copy_command(file_source.path, file_dest.path, push)

	result = subprocess.run(cmd, encoding='utf-8', capture_output=True)

	if result.returncode != 0:
		print('nonzero return code of adb command')
		print(result)
		exit()

	if not push:
		os.utime(str(file_dest.path), (file_source.mtime, file_source.mtime))

################################################################################
# adb push / pull

def get_rm_command(path_source: pathlib.PurePath, path_dest: pathlib.PurePath, push: bool):
	cmd = ['adb', 'rm']

	if push:
		cmd += ['push']
	else:
		cmd += ['pull']

	cmd += [str(path_source), str(path_dest)]

	return cmd


def copy(path_source: pathlib.PurePath, path_dest: pathlib.PurePath, push: bool):
	cmd = get_copy_command(path_source, path_dest, push)

	result = subprocess.run(cmd, encoding='utf-8', capture_output=True)

	if result.returncode != 0:
		print('nonzero return code of adb command')
		print(result)
		exit()

################################################################################
# argument parser

class Interface(object):
	def list_files(self, path_root: pathlib.PurePath):
		raise NotImplementedError('Abstract')

	def copy_file(self, file_source: FileInfo, path_dest: FileInfo):
		raise NotImplementedError('Abstract')

class PCInterface(Interface):
	def list_files(self, path_root: pathlib.PurePath):
		return list_files(path_root, True)

	def copy_file(self, file_source: FileInfo, path_dest: pathlib.PurePath):
		copy(file_source, path_dest, push=False)
		os.utime(str(path_dest), (file_source.mtime, file_source.mtime))

	def rm

class ADBInterface(Interface):
	def list_files(self, path_root: pathlib.PurePath):
		return list_files(path_root, False)

	def copy_file(self, file_source: FileInfo, path_dest: pathlib.PurePath):
		copy(file_source, path_dest, push=True)


################################################################################
# argument parser


def parse_args():
	parser = argparse.ArgumentParser(
		description='sync files to an android phone, keeping the timestamp like rsync -t')

	def check_directory_exists(path):
		path = pathlib.Path(path).resolve()
		if not path.is_dir():
			parser.error(f'directory {path} does not exist!')
		else:
			return path

	parser.add_argument(
		'local',
		type=check_directory_exists,
		help='local path, used as source with direction to_remote')
	parser.add_argument(
		'remote',
		type=pathlib.PurePath,
		help='remote path, used as source with direction from_remote')
	parser.add_argument('direction', choices=[
		'to_remote', 'from_remote'], help='copy file to or from the android device')

	parser.add_argument(
		'-y', '--yes',
		action='store_true',
		help='sync without confirmation')
	parser.add_argument(
		'--delete',
		action='store_true',
		help='delete files that only exist in the destination (only works with yes)')

	parser.add_argument(
		'--whitelist',
		action='append',
		help='only sync files that match this glob pattern, can be specified multiple times')
	parser.add_argument(
		'--blacklist',
		action='append',
		help='don\'t sync files that match this glob pattern, can be specified multiple times')
	parser.add_argument(
		'--modify-window',
		metavar='interval', type=float, default=2,
		help='do not sync files whose times are within <interval> (seconds)')

	try:
		import argcomplete
		argcomplete.autocomplete(parser)
	except:
		pass

	return parser.parse_args()

################################################################################
# main func


def main():
	args = parse_args()

	print('scanning local files')
	files_local = list_files(args.local, local=True)
	print('scanning remote files')
	files_remote = list_files(args.remote, local=False)

	files_local = list(files_local)
	files_remote = list(files_remote)

	print(f'{len(files_local)} local files')
	print(f'{len(files_remote)} remote files')

	push = args.direction == 'to_remote'

	files_source = files_local if push else files_remote
	files_dest = files_remote if push else files_local

	files_sync, files_rogue = diff(files_source, files_dest)

	print(files_sync)
	print(files_rogue)


if __name__ == '__main__':
	main()
exit()





























################################################################################

print('connecting to device')

signer = adb.sign_m2crypto.M2CryptoSigner(
	os.path.expanduser('~/.android/adbkey'))

cmd = adb.adb_commands.AdbCommands()
phone = cmd.ConnectDevice(rsa_keys=[signer])

################################################################################

print('scanning remote directory')

files_remote = []
folders_empty_remote = []


def mode_isdir(mode):
	return bool(mode & (1 << 14))


def scan_path_remote(path):
	global files
	files = phone.List(path)
	if len(files) == 2:  # only . and ..
		folders_empty_remote.append(path)
		return
	for file in files:
		file_name = file.filename.decode()
		file_name_abs = os.path.join(path, file_name)
		path_rel = os.path.relpath(path, args.remote)
		if file_name in ['.', '..']:
			continue
		if mode_isdir(file.mode):
			scan_path_remote(file_name_abs)
		else:
			files_remote.append(FileInfo(path_rel, file_name, file.mtime, file.size))


scan_path_remote(args.remote)
filenames_remote = [os.path.join(file.path, file.name)
                    for file in files_remote]

print(f'  > found {len(files_remote)} files')

################################################################################
# assign source and destination from local and remote
filenames_source = filenames_local if args.direction == 'to_remote' else filenames_remote
files_source = files_local if args.direction == 'to_remote' else files_remote

filenames_destination = filenames_remote if args.direction == 'to_remote' else filenames_local
files_destination = files_remote if args.direction == 'to_remote' else files_local
folders_empty_destination = folders_empty_remote if args.direction == 'to_remote' else folders_empty_local

################################################################################
# compare file lists

indexes_files_to_sync = []  # missing and old files (indexes for files_source)
# files that only exist in the destination (indexes for files_destination)
indexes_files_rogue = []


def include_file(filename):
	if args.whitelist:
		matches = False
		for pattern in args.whitelist:
			if fnmatch.fnmatch(filename_source, pattern):
				matches = True
				break
		if not matches:
			return False
	if args.blacklist:
		for pattern in args.blacklist:
			if fnmatch.fnmatch(filename_source, pattern):
				return False
	return True


for (index_source, filename_source) in enumerate(filenames_source):
	if not include_file(filename_source):
		continue
	if filename_source not in filenames_destination:
		indexes_files_to_sync.append(index_source)
	else:
		file_source = files_source[index_source]
		file_destination = files_destination[filenames_destination.index(
			filename_source)]
		if (abs(file_source.mtime - file_destination.mtime) > args.modify_window) or (
				file_source.size != file_destination.size):
			indexes_files_to_sync.append(index_source)

for (index_destination, filename_destination) in enumerate(filenames_destination):
	if filename_destination not in filenames_source:
		indexes_files_rogue.append(index_destination)

################################################################################
# print infos
print()


def human_size_from_bytes(size):
	step_unit = 1024

	for unit in ['bytes', 'KiB', 'MiB', 'GiB', 'TiB']:
		if size < step_unit:
			return f'{size:3.1f} {unit}'
		size /= step_unit


if indexes_files_to_sync:
	size_source = 0
	for index_source in indexes_files_to_sync:
		size_source += files_source[index_source].size
	print(f'{len(indexes_files_to_sync)} files need to be synced ({human_size_from_bytes(size_source)})')

if indexes_files_rogue:
	size_destination = 0
	for index_destination in indexes_files_rogue:
		size_destination += files_destination[index_destination].size
	print(f'{len(indexes_files_rogue)} files only exist in the destination ({human_size_from_bytes(size_destination)})')

if folders_empty_destination:
	print(f'{len(folders_empty_destination)} empty folders in destination')

print()


################################################################################


def sync_files():
	global indexes_files_to_sync

	count_total = len(indexes_files_to_sync)
	size_synced = 0
	time_start = time.time()
	for (count, index_source) in enumerate(indexes_files_to_sync):
		filename_source = filenames_source[index_source]
		file_source = files_source[index_source]
		path_local = os.path.join(args.local, filename_source)
		path_remote = os.path.join(args.remote, filename_source)
		progress_header = f'({count + 1}/{count_total}) {filename_source}'
		print(progress_header, end='')

		def progress_callback(filename, size_current, size_total):
			# extra spaces to clear line, in case the current bytes passed a new decimal prefix
			print(f'\r{progress_header} \t ({human_size_from_bytes(size_current)}/{human_size_from_bytes(size_total)})   ', end='')

		if args.direction == 'to_remote':
			try:
				phone.Push(path_local, path_remote,
				           files_source[index_source].mtime, progress_callback=progress_callback)
			except:
				print()
				delete_rogue_checkdir_remote(path_remote)
				raise
		else:
			os.makedirs(os.path.dirname(path_local), exist_ok=True)
			try:
				phone.Pull(path_remote, path_local, progress_callback=progress_callback)
				os.utime(path_local, (file_source.mtime, file_source.mtime))
			except:
				print()
				delete_rogue_checkdir_local(path_local)
				raise

		size_synced += file_source.size
		print()

	indexes_files_to_sync = []

	duration = time.time() - time_start
	print(f'total {human_size_from_bytes(size_synced)} synced in {duration:0.0f}s ({human_size_from_bytes(size_synced / duration)}/s)')


def delete_rogue_checkdir_remote(path_remote):
	while True:
		if not mode_isdir(phone.Stat(path_remote)[0]):
			print(f'deleting file   {path_remote}')
			phone.Shell(f'rm "{path_remote}"')
		else:
			print(f'deleting folder {path_remote}')
			phone.Shell(f'rmdir "{path_remote}"')
		path_remote = os.path.dirname(path_remote)
		if len(phone.List(path_remote)) > 2:
			break


def delete_rogue_checkdir_local(path_local):
	while True:
		if os.path.isfile(path_local):
			print(f'deleting file   {path_local}')
			os.remove(path_local)
		else:
			print(f'deleting folder {path_local}')
			os.rmdir(path_local)
		path_local = os.path.dirname(path_local)
		if os.listdir(path_local):
			break


def delete_rogues():
	global indexes_files_rogue
	global folders_empty_destination
	for index_destination in indexes_files_rogue:
		filename_destination = filenames_destination[index_destination]
		if args.direction == 'to_remote':
			path_remote = os.path.join(args.remote, filename_destination)
			delete_rogue_checkdir_remote(path_remote)
		else:
			path_local = os.path.join(args.local, filename_destination)
			delete_rogue_checkdir_local(path_local)
	indexes_files_rogue = []

	for folder_empty_destination in folders_empty_destination:
		if args.direction == 'to_remote':
			delete_rogue_checkdir_remote(folder_empty_destination)
		else:
			delete_rogue_checkdir_local(folder_empty_destination)
	folders_empty_remote = []


def list_files():
	def unix_to_str(timestamp):
		return datetime.datetime.fromtimestamp(int(timestamp)).strftime('%Y-%m-%d %H:%M:%S')

	for index_source in indexes_files_to_sync:
		filename_source = filenames_source[index_source]
		file_source = files_source[index_source]

		if filename_source in filenames_destination:
			print(filename_source)
			index_destination = filenames_destination.index(filename_source)
			file_destination = files_destination[index_destination]
			print(
				f' > source     : {unix_to_str(file_source.mtime)}\t{human_size_from_bytes(file_source.size)}')
			print(
				f' > destination: {unix_to_str(file_destination.mtime)}\t{human_size_from_bytes(file_destination.size)}')
		else:
			print(f'{filename_source}\t({human_size_from_bytes(file_source.size)})')


def list_rogues():
	any_rogues = False
	if indexes_files_rogue:
		any_rogues = True
		print('rogue files:')
		for index_destination in indexes_files_rogue:
			print(filenames_destination[index_destination])
	if folders_empty_destination:
		any_rogues = True
		print('empty folders:')
		for folder_empty_destination in folders_empty_destination:
			print(folder_empty_destination)
	if not any_rogues:
		print('ro rogue files or empty folders')


################################################################################

if args.yes:
	sync_files()
	if args.delete:
		delete_rogues()
	print('done')
	exit()

################################################################################

while True:
	if not indexes_files_to_sync and not indexes_files_rogue and not folders_empty_destination:
		print('nothing more to do')
		exit()

	print("""select action:
	[l]/[list] files to be synced
	[l]ist [r]ogue files
	[d]elete [r]ogue files and empty folders
	[y]/[s]ync
	[n]/[q]uit""")
	action = input('action: ').strip()

	if action in ['y', 's', 'sync']:
		sync_files()
	elif action in ['n', 'q', 'quit', 'exit']:
		exit(0)
	elif action in ['l', 'list']:
		list_files()
	elif action in ['lr', 'list rogue']:
		list_rogues()
	elif action in ['dr', 'delete rogue']:
		delete_rogues()
	else:
		print('unsupported action')
