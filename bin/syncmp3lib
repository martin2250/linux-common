#!/usr/bin/python
from __future__ import print_function

import argparse
import concurrent.futures
import multiprocessing
import os
import os.path as path
import subprocess
import sys
import time
from dataclasses import dataclass

parser = argparse.ArgumentParser(
	description='converts a music library to lower quality mp3')


def check_directory_exists(dir):
	if not os.path.isdir(dir):
		parser.error(f'directory {dir} does not exist!')
	else:
		return os.path.abspath(dir)


parser.add_argument('inputpath', metavar='IN',
                    type=check_directory_exists, help='input path')
parser.add_argument('outputpath', metavar='OUT',
                    type=os.path.abspath, help='output path')
parser.add_argument('mp3_quality', metavar='Q', type=str,
                    help='quality argument for libmp3lame (0-9 or copy). copy does not work with input files other than *.mp3', choices=list(range(0, 10)) + ['copy'])
parser.add_argument('-n', '--dry-run', action='store_true',
                    help='print ffmpeg commands instead of executing them')
parser.add_argument('--cover-scale', metavar='SIZE',
                    type=int, help='rescale covers to SIZExSIZE, a size of 0 discards the cover')
parser.add_argument('--limit', metavar='COUNT', type=int,
                    help='only convert the first COUNT files')

args = parser.parse_args()

inputpath = args.inputpath
outputpath = args.outputpath

print('input path: ', inputpath)
print('output path:', outputpath)

print('scanning directory')


@dataclass
class InputFile:
	input: str
	output: str
	inputmtime: float


files = []
rogue_files = []

extensions = ['.mp3', '.m4a', '.wav', '.aac', '.flac', '.wma']

for directory, _, filenames in os.walk(inputpath):
	for filename in filenames:
		filename_base, extension = os.path.splitext(filename)
		file_path = os.path.join(directory, filename)
		if extension in extensions:
			directory_output = os.path.join(
				outputpath, os.path.relpath(directory, inputpath))
			file_path_output = os.path.join(directory_output, filename_base + '.mp3')
			files.append(InputFile(file_path, file_path_output,
                          os.path.getmtime(file_path)))
		else:
			rogue_files.append(file_path)

print(f'found {len(files)} music files')
if rogue_files:
	print(f'found {len(rogue_files)} rogue files:')
	for rogue_file in rogue_files:
		print(f' > {rogue_file}')


print('checking whether files need to be converted')


def compare_files(file):
	"""	determine wether file needs to be converted
	args:
	input -- path of the input file
	output -- path of the output file
	"""
	if not os.path.isfile(file.output):
		return True
	return os.path.getmtime(file.output) != file.inputmtime


files = [file for file in files if compare_files(file)]
print(f'{len(files)} files need to be converted')

if args.limit is not None:
	print(f'limiting to {args.limit} files')
	files = files[:args.limit]


def get_command(file):
	""" create ffmpeg command to convert the file """
	command = [
		'ffmpeg',
		'-i', file.input,
		'-map', '0',
		'-y',
		'-hide_banner'
	]

	if args.mp3_quality == 'copy':
		command += ['-c:a', 'copy']
	else:
		command += [
			'-c:a', 'libmp3lame',
			'-q:a', str(args.mp3_quality)
		]

	if args.cover_scale is None:
		command += ['-c:v', 'copy']
	else:
		if args.cover_scale == 0:
			command += ['-vn']
		else:
			command += [
				'-c:v', 'mjpeg',
				'-vf', f'scale={args.cover_scale}:{args.cover_scale}'
			]

	command += [file.output]
	return command


def convert(file):
	""" prepare and start conversion with ffmpeg process, returns handle to ffmpeg process """
	command = get_command(file)

	if path.exists(file.output):
		os.remove(file.output)
	if not path.isdir(path.dirname(file.output)):
		os.makedirs(path.dirname(file.output))
	return subprocess.Popen(command, stdin=subprocess.DEVNULL, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)


@dataclass
class Worker:
	file: InputFile
	process: subprocess.Popen


@dataclass
class Error:
	file: InputFile
	retcode: int


cpu_count = multiprocessing.cpu_count()
workers = []
errors = []

total = len(files)
done = 0

if args.dry_run:
	for file in files:
		print(' '.join(get_command(file)))
else:
	try:
		while files or workers:
			# check running workers
			for i in range(len(workers) - 1, -1, -1):
				worker = workers[i]
				if worker.process.poll() is not None:
					if worker.process.returncode == 0:
						os.utime(worker.file.output,
						         (worker.file.inputmtime, worker.file.inputmtime))
						done += 1
					else:
						error = Error(worker.file, worker.process.returncode)
						errors.append(error)
						os.remove(worker.file.output)
					del workers[i]

			# restock workers
			while files and len(workers) < cpu_count:
				file = files.pop(0)
				worker = Worker(file, convert(file))
				workers.append(worker)

			print(f'{len(workers)} workers, {done}/{total} files converted, {len(errors)} errors', end='\r')
			time.sleep(0.01)

	except KeyboardInterrupt:
		print()
		print('KeyboardInterrupt, stopping workers and cleaning up partial files')
		for worker in workers:
			worker.process.kill()
			os.remove(worker.file.output)

print('done')
if errors:
	print('errors:')
	print('RET\tFILE')
	for error in errors:
		print(f'{error.retcode}\t{error.file.input}')
